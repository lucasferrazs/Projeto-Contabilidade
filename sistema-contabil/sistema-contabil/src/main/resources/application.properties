spring.application.name=sistema-contabil

# =======================================
# CONFIGURAÇÃO DO BANCO DE DADOS (DATASOURCE)
# =======================================
# URL de conexão com o seu banco. Crie um banco de dados chamado "sistema_contabil".
spring.datasource.url=jdbc:mysql://localhost:3306/planodecontas?useSSL=false&serverTimezone=UTC

# Usuário e senha do seu banco de dados MySQL
spring.datasource.username=root
spring.datasource.password=

# Driver do MySQL que o Spring deve usar
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# =======================================
# CONFIGURAÇÃO DO HIBERNATE (JPA)
# =======================================
# Diz ao Hibernate qual "dialeto" SQL ele deve usar para se comunicar com o MySQL
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Ação a ser tomada no banco de dados quando a aplicação inicia.
# 'update': atualiza o schema (tabelas) se houver mudanças nas suas classes @Entity. Ótimo para desenvolvimento.
# 'validate': valida se o schema corresponde às entidades, mas não muda nada.
# 'create': apaga tudo e recria o banco a cada inicialização.
# 'create-drop': cria ao iniciar e apaga ao fechar.
# 'none': não faz nada.
spring.jpa.hibernate.ddl-auto=validate

# Mostra no console o SQL que o Hibernate está executando nos bastidores.
# Muito útil para depuração.
spring.jpa.show-sql=true

# Formata o SQL mostrado no console para ficar mais legível.
spring.jpa.properties.hibernate.format_sql=true

# NÃO criar/alterar tabelas automaticamente
# spring.jpa.hibernate.ddl-auto=none

# OU apenas validar se a estrutura está correta
#spring.jpa.hibernate.ddl-auto=validate

# Mostrar SQL gerado (útil para debug)
# spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true